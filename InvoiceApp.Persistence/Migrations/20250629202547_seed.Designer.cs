// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvoiceApp.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250629202547_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "İkitelli OSB Mah. Atatürk Blv. No:45, Başakşehir / İstanbul",
                            EMail = "info@yildizlar.com.tr",
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaxNumber = "1234567890",
                            Title = "Yıldızlar Elektronik A.Ş.",
                            UserId = 2
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Güzelyalı Mah. Sahil Cad. No:12, Konak / İzmir",
                            EMail = "satis@cinar-gida.com",
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaxNumber = "0987654321",
                            Title = "Çınar Gıda Tic. Ltd. Şti.",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            CustomerId = 1,
                            InvoiceDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvoiceNumber = "FTR-2025001",
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TotalAmount = 1470m,
                            UserId = 2
                        },
                        new
                        {
                            InvoiceId = 2,
                            CustomerId = 2,
                            InvoiceDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvoiceNumber = "FTR-2025002",
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TotalAmount = 825m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.InvoiceLine", b =>
                {
                    b.Property<int>("InvoiceLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceLineId"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quentity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceLineId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceLines");

                    b.HasData(
                        new
                        {
                            InvoiceLineId = 1,
                            InvoiceId = 1,
                            ItemName = "Samsung 27\" Monitör",
                            Price = 250m,
                            Quentity = 3,
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            InvoiceLineId = 2,
                            InvoiceId = 1,
                            ItemName = "Logitech Kablosuz Mouse",
                            Price = 45m,
                            Quentity = 6,
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            InvoiceLineId = 3,
                            InvoiceId = 2,
                            ItemName = "Nescafe Classic 100gr",
                            Price = 25m,
                            Quentity = 10,
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 3
                        },
                        new
                        {
                            InvoiceLineId = 4,
                            InvoiceId = 2,
                            ItemName = "Doğuş Rize Çayı 1kg",
                            Price = 55m,
                            Quentity = 5,
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            PasswordHash = "fcb4864a04e0f5a7f301d4d3d366cf812a30c51dd3fae0d176e1de55294e3c6d",
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "user"
                        },
                        new
                        {
                            UserId = 2,
                            PasswordHash = "fcb4864a04e0f5a7f301d4d3d366cf812a30c51dd3fae0d176e1de55294e3c6d",
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "yildizlar"
                        },
                        new
                        {
                            UserId = 3,
                            PasswordHash = "fcb4864a04e0f5a7f301d4d3d366cf812a30c51dd3fae0d176e1de55294e3c6d",
                            RecordDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "cinar"
                        });
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("InvoiceApp.Domain.Entitites.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.Invoice", b =>
                {
                    b.HasOne("InvoiceApp.Domain.Entitites.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InvoiceApp.Domain.Entitites.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.InvoiceLine", b =>
                {
                    b.HasOne("InvoiceApp.Domain.Entitites.Invoice", "Invoice")
                        .WithMany("Lines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceApp.Domain.Entitites.User", "User")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.Invoice", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("InvoiceApp.Domain.Entitites.User", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("InvoiceLines");

                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
